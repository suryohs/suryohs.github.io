<!doctype html>
<html lang="id">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Assesmen Formatif</title>
  <style>
    :root{--bg:#0f172a;--card:#071028;--accent:#06b6d4;--muted:#94a3b8;--ok:#16a34a;--bad:#ef4444}
    *{box-sizing:border-box}
    body{margin:0;font-family:Inter,ui-sans-serif,system-ui,-apple-system,"Segoe UI",Roboto,Helvetica,Arial;color:#e6eef6;background:linear-gradient(180deg,#071029 0%, #071b2a 100%);min-height:100vh;display:flex;align-items:center;justify-content:center;padding:24px}
    .card{width:980px;max-width:100%;background:linear-gradient(180deg,rgba(255,255,255,0.03),rgba(255,255,255,0.01));border-radius:12px;padding:24px;box-shadow:0 10px 30px rgba(2,6,23,0.6)}
    h1{margin:0 0 8px;font-size:20px}
    p.lead{color:var(--muted);margin-top:0;margin-bottom:18px}
    .row{display:flex;gap:12px}
    .col{flex:1}
    label{display:block;color:var(--muted);font-size:13px;margin-bottom:6px}
    select,input,button,textarea{width:100%;padding:10px;border-radius:8px;border:1px solid rgba(255,255,255,0.06);background:transparent;color:#e6eef6}
    button{cursor:pointer;background:var(--accent);border:none;color:#022;font-weight:600}
    button.ghost{background:transparent;border:1px solid rgba(255,255,255,0.06);color:var(--muted)}
    .center{text-align:center}
    .hidden{display:none}
    .meta{display:flex;gap:8px;flex-wrap:wrap}
    .meta > div{background:rgba(255,255,255,0.02);padding:8px 12px;border-radius:8px;font-size:13px}
    .question{font-size:22px;margin:18px 0}
    .timer{font-weight:700;font-size:20px}
    .feedback{margin-top:12px;font-weight:700}
    .small{font-size:13px;color:var(--muted)}
    .result-grid{display:grid;grid-template-columns:repeat(2,1fr);gap:12px}
    @media (max-width:700px){.row{flex-direction:column}.result-grid{grid-template-columns:1fr}}
  </style>
</head>
<body>
  <div class="card" id="app">
    <!-- PAGE 1: Login -->
    <div id="page-login">
      <h1>Assesmen Sumatif — Login</h1>
      <p class="lead">Masuk menggunakan data peserta. Pastikan koneksi API aktif.</p>
      <div style="margin-bottom:12px" id="login-status" class="small">Mengambil daftar peserta...</div>
      <div class="row">
        <div class="col">
          <label>Username (nama)</label>
          <select id="usernameSelect"><option>Memuat...</option></select>
        </div>
        <div class="col">
          <label>Password (kelas)</label>
          <input id="passwordInput" type="text" placeholder="Masukkan password" autocomplete="off" />
        </div>
      </div>
      <div style="margin-top:12px" class="row">
        <div class="col">
          <label>Jenis Tes</label>
          <select id="jenisTesSelect">
            <option>AF31 TAMBAH KURANG DESIMAL</option>
          </select>
        </div>
        <div class="col">
          <label>&nbsp;</label>
          <button id="loginBtn">Login</button>
        </div>
      </div>
      <div style="margin-top:12px" class="small">API endpoint: <code>https://script.google.com/macros/s/AKfycbwLkVTPIG0bOxSCHQHiT7kNWge6mIheTqH_qb6ghAqiD_8RUl96RVKmZ5BQJptfBcAFhg/exec</code></div>
    </div>

    <!-- PAGE 2: Konfirmasi -->
    <div id="page-confirm" class="hidden">
      <h1>Konfirmasi Mulai Tes</h1>
      <p class="lead">Periksa kembali data Anda lalu masukkan token.</p>
      <div class="meta" style="margin-bottom:12px">
        <div>Nama: <strong id="conf_nama"></strong></div>
        <div>Kelas: <strong id="conf_kelas"></strong></div>
        <div>Jenis Tes: <strong id="conf_jenis"></strong></div>
      </div>
      <label>Token</label>
      <input id="tokenInput" type="text" placeholder="Masukkan token dari pengawas" autocomplete="off" />
      <div style="margin-top:12px" class="row">
        <div class="col"><button id="checkTokenBtn">Validasi Token & Mulai</button></div>
        <div class="col"><button id="backToLogin" class="ghost">Kembali</button></div>
      </div>
      <div id="tokenMsg" class="small" style="margin-top:8px"></div>
    </div>

    <!-- PAGE 3: Asesmen -->
    <div id="page-assesmen" class="hidden">
      <h1 id="ass_title">Asesmen — Soal <span id="currentIndex">0</span>/10</h1>
      <div class="small">Waktu tiap soal: <span class="timer" id="questionTimer">60</span> detik</div>
      <div style="height:12px"></div>
      <div id="countdownArea" class="center small">Siap? Hitungan mundur: <strong id="preCount">3</strong></div>
      <div id="questionArea" class="hidden">
        <div class="question" id="questionText">-3.86 + 2.5</div>
        <textarea id="answerInput" rows="2" placeholder="Ketik jawaban numerik di sini (contoh -1.36)"></textarea>
        <div style="display:flex;gap:8px;margin-top:8px">
          <button id="submitAnswer">Kirim Jawaban</button>
          <button id="skipBtn" class="ghost">Lewati</button>
        </div>
        <div id="feedback" class="feedback"></div>
      </div>
      <div id="assesmenFooter" style="margin-top:10px;display:flex;justify-content:space-between;align-items:center">
        <div class="small">Tekan Enter untuk mengirim. Tombol Tab dimatikan.</div>
        <div class="small">Skor: <strong id="scoreDisplay">0</strong></div>
      </div>
    </div>

    <!-- PAGE 4: Result -->
    <div id="page-result" class="hidden">
      <h1>Hasil Asesmen</h1>
      <p class="lead">Terima kasih telah menyelesaikan asesmen.</p>
      <div class="result-grid" style="margin-bottom:12px">
        <div>NAMA<div><strong id="res_nama"></strong></div></div>
        <div>KELAS<div><strong id="res_kelas"></strong></div></div>
        <div>JENIS_TES<div><strong id="res_jenis"></strong></div></div>
        <div>TOKEN<div><strong id="res_token"></strong></div></div>
        <div>SCORE<div><strong id="res_score"></strong></div></div>
        <div>DURASI<div><strong id="res_durasi"></strong></div></div>
        <div>WAKTU_SIMPAN<div><strong id="res_waktu"></strong></div></div>
      </div>
      <div class="small">Data akan dikirim otomatis ke spreadsheet.</div>
      <div style="margin-top:12px"><button id="restartBtn" class="ghost">Kembali ke Login</button></div>
    </div>
  </div>

<script>
(() => {
  const API = 'https://script.google.com/macros/s/AKfycbwLkVTPIG0bOxSCHQHiT7kNWge6mIheTqH_qb6ghAqiD_8RUl96RVKmZ5BQJptfBcAFhg/exec';

  // State
  let students = [];
  let session = { nama:'', kelas:'', jenis:'', token:'', startTime:null, endTime:null, score:0 };
  let questions = [];
  let current = 0;
  let perQuestionTimer = null;
  let perQuestionSeconds = 60;
  let countdownInterval = null;
  let preCountSeconds = 3;
  let awaitingTransition = false;

  // Elements
  const usernameSelect = document.getElementById('usernameSelect');
  const passwordInput = document.getElementById('passwordInput');
  const jenisTesSelect = document.getElementById('jenisTesSelect');
  const loginBtn = document.getElementById('loginBtn');
  const loginStatus = document.getElementById('login-status');

  const pageLogin = document.getElementById('page-login');
  const pageConfirm = document.getElementById('page-confirm');
  const pageAss = document.getElementById('page-assesmen');
  const pageResult = document.getElementById('page-result');

  const conf_nama = document.getElementById('conf_nama');
  const conf_kelas = document.getElementById('conf_kelas');
  const conf_jenis = document.getElementById('conf_jenis');
  const tokenInput = document.getElementById('tokenInput');
  const checkTokenBtn = document.getElementById('checkTokenBtn');
  const tokenMsg = document.getElementById('tokenMsg');
  const backToLogin = document.getElementById('backToLogin');

  const preCount = document.getElementById('preCount');
  const countdownArea = document.getElementById('countdownArea');
  const questionArea = document.getElementById('questionArea');
  const questionText = document.getElementById('questionText');
  const answerInput = document.getElementById('answerInput');
  const submitAnswer = document.getElementById('submitAnswer');
  const skipBtn = document.getElementById('skipBtn');
  const feedback = document.getElementById('feedback');
  const scoreDisplay = document.getElementById('scoreDisplay');
  const currentIndex = document.getElementById('currentIndex');
  const questionTimer = document.getElementById('questionTimer');

  const res_nama = document.getElementById('res_nama');
  const res_kelas = document.getElementById('res_kelas');
  const res_jenis = document.getElementById('res_jenis');
  const res_token = document.getElementById('res_token');
  const res_score = document.getElementById('res_score');
  const res_durasi = document.getElementById('res_durasi');
  const res_waktu = document.getElementById('res_waktu');
  const restartBtn = document.getElementById('restartBtn');

  // Helper: fetch student data
  async function loadStudents(){
    loginStatus.textContent = 'Mengambil daftar peserta...';
    try{
      const r = await fetch(API);
      const j = await r.json();
      if(j && j.success && Array.isArray(j.data)){
        students = j.data.slice();
        // Ensure fields nama, kelas, jenisTes, token exist
        students = students.filter(s => s.nama && s.kelas);
        // sort by nama alphabet
        students.sort((a,b)=> (''+a.nama).localeCompare((''+b.nama)) );
        renderStudentOptions();
        loginStatus.textContent = `Terdapat ${students.length} peserta.`;
      } else {
        loginStatus.textContent = 'Gagal memuat peserta (response format tidak sesuai).';
        usernameSelect.innerHTML = '<option>Tidak tersedia</option>';
      }
    }catch(err){
      loginStatus.textContent = 'Gagal memuat peserta. Pastikan koneksi API aktif.';
      usernameSelect.innerHTML = '<option>Tidak tersedia</option>';
      console.error(err);
    }
  }

  function renderStudentOptions(){
    usernameSelect.innerHTML = '';
    const opt = document.createElement('option'); opt.value=''; opt.textContent='-- pilih nama --'; usernameSelect.appendChild(opt);
    for(const s of students){
      const o = document.createElement('option'); o.value = s.nama; o.textContent = s.nama; usernameSelect.appendChild(o);
    }
  }

  function findStudentByName(nama){
    return students.find(s => s.nama === nama);
  }

  loginBtn.addEventListener('click', ()=>{
    const nama = usernameSelect.value;
    const pass = passwordInput.value.trim();
    const jenis = jenisTesSelect.value;
    if(!nama){ alert('Pilih username (nama)'); return; }
    if(!pass){ alert('Masukkan password (kelas)'); return; }
    const s = findStudentByName(nama);
    if(!s){ alert('Username tidak ditemukan di data peserta'); return; }
    if(String(s.kelas).trim() !== pass){ alert('Password salah'); return; }
    // berhasil
    session.nama = s.nama; session.kelas = s.kelas; session.jenis = jenis;
    // go to confirm
    conf_nama.textContent = session.nama; conf_kelas.textContent = session.kelas; conf_jenis.textContent = session.jenis;
    showPage('confirm');
  });

  backToLogin.addEventListener('click', ()=>{ showPage('login'); });

  checkTokenBtn.addEventListener('click', ()=>{
    const token = tokenInput.value.trim();
    if(!token){ tokenMsg.textContent='Masukkan token.'; return; }
    // validate against student record that matches nama and jenis
    const s = students.find(x => x.nama === session.nama && x.jenisTes === session.jenis && String(x.token) === token);
    if(!s){
      tokenMsg.style.color = 'var(--bad)'; tokenMsg.textContent = 'Token tidak valid untuk jenis tes ini.'; return;
    }
    // valid
    tokenMsg.style.color = 'var(--ok)'; tokenMsg.textContent = 'Token valid. Bersiap memulai.';
    session.token = token;
    // proceed to start assesmen after small delay
    setTimeout(()=> startAssesmen(), 700);
  });

  // Start assessment flow
  async function startAssesmen(){
    // Prepare questions
    questions = generateQuestions(10);
    current = 0;
    session.score = 0;
    scoreDisplay.textContent = '0';
    showPage('assesmen');
    // Request fullscreen
    try{ await requestFullscreen(); }catch(e){ console.warn('Fullscreen request failed',e); }
    // record start time
    session.startTime = Date.now();
    // pre-countdown then show first question
    await runPreCountdown();
    showQuestion(current);
  }

  function generateQuestions(n){
    const arr = [];
    for(let i=0;i<n;i++) arr.push(makeDecimalExpression());
    return arr;
  }

  function rand(min,max){ return Math.random()*(max-min)+min }
  function rndDec(digits){ const p = Math.pow(10,digits); return Math.round((Math.random()*2-1)*99*p)/p }

  // Create varied expressions similar to examples
  function makeDecimalExpression(){
    // possibilities: A op B, where A/B can be negative, with 1-3 decimals. Occasionally double negative.
    const decimals = [1,2,3][Math.floor(Math.random()*3)];
    const a = rndDec(decimals);
    const b = rndDec(decimals);
    const op = Math.random()<0.5?'+':'-';
    // with some chance, force parentheses negative example
    if(Math.random()<0.15 && op==='-'){
      // produce A - (B) with B negative sometimes
      const A = formatNumber(a);
      const B = formatNumber(Math.abs(b));
      const sign = Math.random()<0.5?'-':'+'; // create -9.28-(-7.108) style
      if(sign==='-'){
        // produce like -9.28-(-7.108)
        const Araw = formatNumber(a);
        const Braw = formatNumber(Math.abs(b));
        return { text:`${Araw}-${'('+ '-'+Braw +')'}`, value: (a - (-Math.abs(b))) };
      }
    }
    const A = formatNumber(a);
    const B = formatNumber(b);
    const text = `${A} ${op} ${B}`;
    const value = op==='+'? (a + b) : (a - b);
    return { text, value };
  }

  function formatNumber(x){
    // Ensure minus sign for negatives, show up to 3 decimals without trailing zeros removal to be clear
    const fixed = Number.isInteger(x)? String(x) : x.toFixed(Math.max(0, Math.min(3, (String(Math.abs(x)).split('.')[1]||'').length)));
    return fixed;
  }

  function showPage(p){
    pageLogin.classList.add('hidden'); pageConfirm.classList.add('hidden'); pageAss.classList.add('hidden'); pageResult.classList.add('hidden');
    if(p==='login') pageLogin.classList.remove('hidden');
    if(p==='confirm') pageConfirm.classList.remove('hidden');
    if(p==='assesmen') pageAss.classList.remove('hidden');
    if(p==='result') pageResult.classList.remove('hidden');
  }

  // Fullscreen helpers
  async function requestFullscreen(){
    const el = document.documentElement;
    if(el.requestFullscreen) await el.requestFullscreen();
    else if(el.webkitRequestFullscreen) el.webkitRequestFullscreen();
  }
  async function exitFullscreen(){ if(document.exitFullscreen) await document.exitFullscreen(); else if(document.webkitExitFullscreen) document.webkitExitFullscreen(); }

  document.addEventListener('fullscreenchange', ()=>{
    const isFs = !!document.fullscreenElement;
    // If user exits fullscreen during assesmen, finish immediately
    if(!isFs && !pageResult.classList.contains('hidden')===false && pageAss.classList.contains('hidden')===false){
      // End assesmen
      finishAssesmen('Keluar dari fullscreen - asesmen selesai');
    }
  });

  // Pre countdown
  function runPreCountdown(){
    return new Promise(resolve=>{
      preCountSeconds = 3; countdownArea.classList.remove('hidden'); questionArea.classList.add('hidden');
      preCount.textContent = preCountSeconds;
      const intr = setInterval(()=>{
        preCountSeconds--; preCount.textContent = preCountSeconds;
        if(preCountSeconds<=0){ clearInterval(intr); countdownArea.classList.add('hidden'); resolve(); }
      },1000);
    });
  }

  function showQuestion(i){
    if(i<0 || i>=questions.length){ finishAssesmen(); return; }
    currentIndex.textContent = (i+1);
    const q = questions[i];
    questionText.textContent = q.text;
    answerInput.value = '';
    feedback.textContent = '';
    questionArea.classList.remove('hidden');
    // start timer
    startQuestionTimer(perQuestionSeconds, ()=> onTimeUp());
    // disable Tab key while in assesmen
    document.addEventListener('keydown', blockTab, true);
  }

  function blockTab(e){ if(e.key === 'Tab'){ e.preventDefault(); } }

  function startQuestionTimer(seconds, onExpire){
    clearInterval(perQuestionTimer);
    let s = seconds;
    questionTimer.textContent = s;
    perQuestionTimer = setInterval(()=>{
      s--; questionTimer.textContent = s;
      if(s<=0){ clearInterval(perQuestionTimer); onExpire(); }
    },1000);
  }

  async function onTimeUp(){
    // treat as wrong
    await provideFeedback(false, 'Waktu habis');
  }

  submitAnswer.addEventListener('click', ()=>{ handleAnswerSubmission(); });
  answerInput.addEventListener('keydown', (e)=>{ if(e.key==='Enter' && !e.shiftKey){ e.preventDefault(); handleAnswerSubmission(); } });
  skipBtn.addEventListener('click', ()=>{ handleSkip(); });

  async function handleAnswerSubmission(){
    if(awaitingTransition) return;
    clearInterval(perQuestionTimer);
    const ansRaw = answerInput.value.trim();
    const q = questions[current];
    // parse numeric
    const ans = parseFloat(ansRaw.replace(/,/g, '.'));
    const correct = q.value;
    const ok = !Number.isNaN(ans) && almostEqual(ans, correct, 0.001);
    if(ok){ await provideFeedback(true); }
    else { await provideFeedback(false); }
  }

  function handleSkip(){ if(awaitingTransition) return; clearInterval(perQuestionTimer); provideFeedback(false,'Lewati - dianggap salah'); }

  function almostEqual(a,b,eps){ return Math.abs(a-b) <= eps; }

  function sleep(ms){ return new Promise(res=>setTimeout(res,ms)); }

  async function provideFeedback(isCorrect, reason){
    awaitingTransition = true;
    document.removeEventListener('keydown', blockTab, true);
    if(isCorrect){
      session.score += 10;
      scoreDisplay.textContent = session.score;
      feedback.style.color = 'var(--ok)'; feedback.textContent = 'Benar ✅';
      await sleep(2000);
    }else{
      const correctVal = questions[current].value;
      feedback.style.color = 'var(--bad)';
      feedback.textContent = 'Salah ❌ — Jawaban benar: ' + formatNumber(correctVal);
      await sleep(5000);
    }
    awaitingTransition = false;
    current++;
    if(current < questions.length){
      // small pre-countdown between questions
      await runPreCountdown();
      showQuestion(current);
    } else {
      finishAssesmen();
    }
  }

  function finishAssesmen(reason){
    // stop timer
    clearInterval(perQuestionTimer);
    session.endTime = Date.now();
    // ensure exit fullscreen
    try{ exitFullscreen(); }catch(e){}
    // enable Tab
    document.removeEventListener('keydown', blockTab, true);
    // move to result page
    showResults(reason);
  }

  function msToHMS(ms){
    const s = Math.floor(ms/1000);
    const h = Math.floor(s/3600); const m = Math.floor((s%3600)/60); const sec = s%60;
    return `${h}h ${m}m ${sec}s`;
  }

  function showResults(reason){
    // compute duration
    const durMs = (session.endTime || Date.now()) - (session.startTime || Date.now());
    const waktuSimpan = new Date().toISOString();
    // fill result fields
    res_nama.textContent = session.nama; res_kelas.textContent = session.kelas; res_jenis.textContent = session.jenis; res_token.textContent = session.token;
    res_score.textContent = session.score; res_durasi.textContent = msToHMS(durMs); res_waktu.textContent = waktuSimpan;
    // send data via fetch no-cors JSON
    const payload = {
      nama: session.nama,
      kelas: session.kelas,
      jenisTes: session.jenis,
      token: session.token,
      score: session.score,
      durasi: msToHMS(durMs),
      waktuSimpan: waktuSimpan
    };
    // Use fetch with mode no-cors as required. This will not allow reading response.
    try{
      fetch(API, {
        method:'POST',
        headers: { 'Content-Type': 'application/json' },
        mode: 'no-cors',
        body: JSON.stringify(payload)
      });
    }catch(e){ console.warn('gagal mengirim data',e); }

    showPage('result');
  }

  restartBtn.addEventListener('click', ()=>{
    // reset
    session = { nama:'', kelas:'', jenis:'', token:'', startTime:null, endTime:null, score:0 };
    questions = []; current = 0;
    showPage('login');
  });

  // small utility to protect against accidental multiuser collisions in client storage
  // We do not use shared localStorage keys for active tests.

  // Initialize
  loadStudents();

})();
</script>
</body>
</html>
